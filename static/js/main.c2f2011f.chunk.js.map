{"version":3,"sources":["img/pngaaa.com-56983.png","components/Questions.jsx","actions/index.js","pages/Login.jsx","pages/Settings.jsx","pages/Game.jsx","pages/Ranking.jsx","pages/Feedback.jsx","serviceWorker.js","reducers/login.js","reducers/trivia.js","reducers/player.js","reducers/index.js","store/index.js","index.js","App.js"],"names":["module","exports","ARRAY","actionPlayerScore","assertions","score","type","payload","sucessFetch","response","fetchApi","token","dispatch","a","async","fetch","json","answer","error","actionLogin","user","email","Login","state","handleChange","bind","validateEmailAndUser","handleSubmit","player","this","props","gravatarEmail","localStorage","setItem","JSON","stringify","test","length","tokien","tokienData","target","name","value","setState","userr","emaill","userEmailAction","className","style","textAlign","width","src","img","action","htmlFor","placeholder","onChange","to","disabled","data-testid","onClick","Component","connect","Settings","id","Questions","correct","incorrect","seconds","disable","numberQuestion","visibilit","redirect","scori","handleClickClassName","handleClickClassNameHelper","nextQuestion","questions","intervalId","setInterval","estadoAnterior","prevProps","prevState","e","resp","playerStatus","difficulty","sum","checkDifficulty","playerScore","incorrect_answers","correct_answer","shuffle","map","element","index","key","array","randomIndex","currentIndex","Math","floor","random","arrayOfScoreAndName","category","question","login","actionForScores","Game","parse","getItem","totalPoints","hashEmail","md5","toString","alt","trivia","results","Ranking","arrCert","arrayOfScore","sort","b","arrayOfUserss","arrayOfUser","Feedback","assert","assertionsVerify","React","Boolean","window","location","hostname","match","INITIAL_STATE","isFetching","rootReducer","combineReducers","middleware","thunk","store","createStore","composeWithDevTools","applyMiddleware","Cypress","ReactDOM","render","basename","process","exact","path","component","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c2f2011f.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/pngaaa.com-56983.60bbbc96.png\";","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport { Redirect } from 'react-router';\nimport './Questions.css';\nimport { actionPlayerScore, actionForScores } from '../actions';\n\nconst TEN_POINTS = 10;\nconst THREE = 3;\nconst TWO = 2;\nconst ONE = 1;\nconst ZERO = 0;\nconst ID_CORRECT = 'correct-answer';\nlet ARRAY;\n\nclass Questions extends Component {\n  constructor() {\n    super();\n    this.state = {\n      correct: null,\n      incorrect: null,\n      seconds: 30,\n      disable: false,\n      numberQuestion: 0,\n      visibilit: 'hide',\n      redirect: false,\n      scori: 0,\n    };\n    this.handleClickClassName = this.handleClickClassName.bind(this);\n    this.handleClickClassNameHelper = this.handleClickClassNameHelper.bind(this);\n    // this.rulesOfUpdate = this.rulesOfUpdate.bind(this);\n    this.nextQuestion = this.nextQuestion.bind(this);\n    this.questions = this.questions.bind(this);\n  }\n\n  componentDidMount() {\n    const ONE_SECOND = 1000;\n    this.intervalId = setInterval(() => {\n      this.setState((estadoAnterior) => ({\n        seconds: estadoAnterior.seconds - 1,\n      }));\n    }, ONE_SECOND);\n  }\n\n  componentDidUpdate(prevProps, prevState) {\n    if (prevState.seconds === 0) {\n      // this.rulesOfUpdate();\n      this.nextQuestion();\n    }\n  }\n\n  // rulesOfUpdate() {\n  //   this.setState({\n  //     seconds: 0,\n  //     incorrect: 'incorrect',\n  //     correct: 'correct',\n  //     disable: true,\n  //   });\n  // }\n\n  checkDifficulty(e) {\n    switch (e) {\n    case 'hard':\n      return THREE;\n    case 'medium':\n      return TWO;\n    case 'easy':\n      return ONE;\n    default:\n      return ZERO;\n    }\n  }\n\n  handleClickClassName({ target }) {\n    this.handleClickClassNameHelper(target.name);\n    const { resp, player, playerStatus: { score, assertions } } = this.props;\n    const { seconds } = this.state;\n    if (target.id === ID_CORRECT) {\n      const { difficulty } = resp[0];\n      const pointsFromDifficulty = this.checkDifficulty(difficulty);\n      const timerPoints = seconds;\n      const correctAnswerPoints = TEN_POINTS + timerPoints * pointsFromDifficulty;\n      const sum = correctAnswerPoints + score;\n      const playerScore = {\n        player: {\n          name: '',\n          assertions: 1 + assertions,\n          score: sum,\n          gravatarEmail: '',\n        },\n      };\n      localStorage.setItem('state', JSON.stringify(playerScore));\n      player(1, sum);\n      this.setState((estadoAnterior) => ({ scori: estadoAnterior.scori + sum }));\n    }\n  }\n\n  questions() {\n    const { correct, incorrect, disable, seconds,\n      numberQuestion } = this.state;\n    const { resp } = this.props;\n    const TRIRTY = 30;\n    if (seconds === TRIRTY) {\n      ARRAY = [...resp[numberQuestion].incorrect_answers,\n        resp[numberQuestion].correct_answer];\n      this.shuffle(ARRAY);\n      this.shuffle(ARRAY);\n    }\n    const tut = ARRAY.map((element, index) => (\n      <div key={ index }>\n        <button\n          name=\"incorrect\"\n          className={ element === resp[numberQuestion].correct_answer\n            ? correct : incorrect }\n          onClick={ this.handleClickClassName }\n          type=\"button\"\n          key={ index }\n          data-testid={ element === resp[numberQuestion].correct_answer\n            ? ID_CORRECT : `wrong-answer-${index}` }\n          id={ element === resp[numberQuestion].correct_answer\n            ? ID_CORRECT : `wrong-answer-${index}` }\n          disabled={ disable }\n        >\n          {element}\n        </button>\n      </div>\n    ));\n    return tut;\n  }\n\n  // source: https://stackoverflow.com/questions/2450954/how-to-randomize-shuffle-a-javascript-array\n  shuffle(array) {\n    let currentIndex = array.length;\n    let randomIndex;\n\n    // While there remain elements to shuffle...\n    while (currentIndex !== 0) {\n      // Pick a remaining element...\n      randomIndex = Math.floor(Math.random() * currentIndex);\n      currentIndex -= 1;\n\n      // And swap it with the current element.\n      [array[currentIndex], array[randomIndex]] = [\n        array[randomIndex],\n        array[currentIndex],\n      ];\n    }\n\n    return array;\n  }\n\n  handleClickClassNameHelper(a) {\n    this.setState({ incorrect: 'incorrect', correct: 'correct' });\n    const n = a;\n    if (n === 'correct' || n === 'incorrect') {\n      this.setState({\n        visibilit: 'show',\n        disable: true,\n      });\n    }\n  }\n\n  nextQuestion() {\n    const { numberQuestion, scori } = this.state;\n    const { user, arrayOfScoreAndName, playerStatus: { assertions } } = this.props;\n    const question = 4;\n    if (numberQuestion === question) {\n      const playerScore = {\n        player: {\n          name: user,\n          assertions: 1 + assertions,\n          score: scori,\n          gravatarEmail: '',\n        },\n      };\n      this.setState({ redirect: true });\n      arrayOfScoreAndName(playerScore);\n    }\n    this.setState((estadoAnterior) => ({\n      numberQuestion: estadoAnterior.numberQuestion + 1,\n      seconds: 30,\n      correct: null,\n      incorrect: null,\n      visibilit: 'hide',\n      disable: false,\n    }));\n  }\n\n  render() {\n    const { redirect, seconds,\n      numberQuestion, visibilit } = this.state;\n    const { resp } = this.props;\n    if (redirect === true) { return <Redirect to=\"/feedback\" />; }\n    return (\n      <div className=\"game-page-questions\">\n        <seconds>{seconds}</seconds>\n        <p data-testid=\"question-category\">{resp[numberQuestion].category}</p>\n        <p data-testid=\"question-text\">{resp[numberQuestion].question}</p>\n        <div className=\"game-page-buttons\">\n          { this.questions() }\n        </div>\n        <div className=\"game-page-next\">\n          <button\n            type=\"button\"\n            data-testid=\"btn-next\"\n            onClick={ this.nextQuestion }\n            className={ seconds === 0 ? 'show' : visibilit }\n          >\n            Próxima\n          </button>\n        </div>\n      </div>\n    );\n  }\n}\n\nQuestions.propTypes = {\n  arrayOfScoreAndName: PropTypes.func.isRequired,\n  player: PropTypes.func.isRequired,\n  playerStatus: PropTypes.objectOf(PropTypes.number).isRequired,\n  resp: PropTypes.objectOf(PropTypes.string).isRequired,\n  user: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  playerStatus: state.player,\n  user: state.login.user,\n});\n\nconst mapDispatchToProps = (dispatch) => ({\n  player: (assertions, score) => dispatch(actionPlayerScore(assertions, score)),\n  arrayOfScoreAndName: (score) => dispatch(actionForScores(score)),\n});\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Questions);\n","const actionLogin = (user, email) => ({\n  type: 'ACTION_LOGIN',\n  payload: {\n    user,\n    email,\n  },\n});\n\nexport const actionForScores = (score) => ({\n  type: 'ARRAY_SCORE',\n  score,\n});\n\nexport const actionPlayerScore = (assertions, score) => ({\n  type: 'ACTION_PLAYER_SCORE',\n  payload: {\n    assertions,\n    score,\n  },\n});\n\nexport const beginFetch = () => ({\n  type: 'BEGIN_FETCH',\n});\n\nexport const sucessFetch = (response) => ({\n  type: 'SUCESS_FETCH',\n  payload: {\n    response,\n  },\n});\n\nexport const failFetch = (error) => ({\n  type: 'FAIL_FETCH',\n  error,\n});\n\nexport const fetchApi = (token) => async (dispatch) => {\n  dispatch(beginFetch());\n  try {\n    const response = await fetch(`https://opentdb.com/api.php?amount=5&token=${token}`);\n    const answer = await response.json();\n    dispatch(sucessFetch(answer));\n  } catch (error) {\n    dispatch(failFetch(error));\n  }\n};\n\nexport default actionLogin;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { FiUser } from 'react-icons/fi';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\nimport { MdEmail } from 'react-icons/md';\nimport actionLogin, { actionPlayerScore } from '../actions';\nimport img from '../img/pngaaa.com-56983.png';\n\nclass Login extends Component {\n  constructor() {\n    super();\n    this.state = {\n      email: '',\n      user: '',\n    };\n    this.handleChange = this.handleChange.bind(this);\n    this.validateEmailAndUser = this.validateEmailAndUser.bind(this);\n    this.handleSubmit = this.handleSubmit.bind(this);\n  }\n\n  componentDidMount() {\n    const { player } = this.props;\n    this.token();\n    const playerScore = {\n      player: {\n        assertions: 0,\n        score: 0,\n        // gravatarEmail: '',\n      },\n    };\n    // localStorage.setItem('state', JSON.stringify(playerScore));\n    player(0, playerScore.player.score);\n  }\n\n  validateEmailAndUser() {\n    const { email, user } = this.state;\n    const emailPattern = /^\\w+([-+.']\\w+)*@\\w+([-.]\\w+)*\\.\\w+([-.]\\w+)*$/i;\n    const player = {\n      user,\n      assertions: 0,\n      score: 0,\n      gravatarEmail: email,\n    };\n    localStorage.setItem('state', JSON.stringify({ player }));\n    if (emailPattern.test(email) && user.length > 0) {\n      return false;\n    }\n    return true;\n  }\n\n  async token() {\n    const response = await fetch(\n      'https://opentdb.com/api_token.php?command=request',\n    );\n    const tokien = await response.json();\n    const tokienData = tokien.token;\n    localStorage.setItem('token', JSON.stringify(tokienData));\n  }\n\n  handleChange({ target }) {\n    const { name, value } = target;\n    this.setState({\n      [name]: value,\n    });\n  }\n\n  async handleSubmit(userr, emaill) {\n    const { userEmailAction } = this.props;\n    userEmailAction(userr, emaill);\n  }\n\n  render() {\n    const { user, email } = this.state;\n    return (\n      <div className=\"hero is-fullheight\">\n        <div style={ { textAlign: 'center' } }>\n          <img width=\"350px\" src={ img } />\n        </div>\n        <div className=\"hero-body\">\n          <div className=\"container\">\n            <div className=\"columns is-centered\">\n              <div className=\"column is-4\">\n                <form action=\"\" className=\"box\">\n                  <div className=\"field\">\n                    <label htmlFor=\"email\" className=\"label\">\n                      Email:\n                    </label>\n                    <div className=\"control has-icons-left\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"john@example.com\"\n                        name=\"email\"\n                        className=\"input\"\n                        onChange={ this.handleChange }\n                      />\n                      <span className=\"icon is-small is-left\">\n                        <i>\n                          <MdEmail />\n                        </i>\n                      </span>\n                    </div>\n                  </div>\n                  <div className=\"field\">\n                    <label htmlFor=\"user\" className=\"label\">\n                      Usuário:\n                    </label>\n                    <div className=\"control has-icons-left\">\n                      <input\n                        type=\"text\"\n                        placeholder=\"...\"\n                        name=\"user\"\n                        className=\"input\"\n                        onChange={ this.handleChange }\n                      />\n                      <span className=\"icon is-small is-left\">\n                        <i>\n                          <FiUser />\n                        </i>\n                      </span>\n                    </div>\n                  </div>\n                  <Link to=\"/play\">\n                    <button\n                      disabled={ this.validateEmailAndUser() }\n                      type=\"button\"\n                      data-testid=\"btn-play\"\n                      className=\"button is-primary is-normal\"\n                      onClick={ () => this.handleSubmit(user, email) }\n                    >\n                      Jogar\n                    </button>\n                  </Link>\n                  <Link to=\"/settings\">\n                    <button\n                      style={ { textAlign: 'right' } }\n                      type=\"button\"\n                      className=\"button is-info is-small\"\n                      data-testid=\"btn-settings\"\n                    >\n                      Configurações\n                    </button>\n                  </Link>\n                </form>\n              </div>\n            </div>\n          </div>\n        </div>\n      </div>\n    );\n  }\n}\n\nLogin.propTypes = {\n  player: PropTypes.func.isRequired,\n  userEmailAction: PropTypes.func.isRequired,\n};\n\nconst mapDispatchToProps = (dispatch) => ({\n  userEmailAction: (user, email) => dispatch(actionLogin(user, email)),\n  player: (assertions, score) => dispatch(actionPlayerScore(assertions, score)),\n});\n\nexport default connect(null, mapDispatchToProps)(Login);\n","import React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\n\nclass Settings extends Component {\n  render() {\n    return (\n      <div className=\"game-page\">\n        <h1 data-testid=\"settings-title\">\n          Settings:\n        </h1>\n        <label htmlFor=\"set-input-1\">\n          More difficult:\n          <input type=\"checkbox\" name=\"More difficult\" id=\"set-input-1\" />\n        </label>\n        <label htmlFor=\"set-input-2\">\n          Complex questions:\n          <input type=\"checkbox\" name=\"Complex questions: \" id=\"set-input-2\" />\n        </label>\n        <label htmlFor=\"set-input-3\">\n          I like mud puddles:\n          <input type=\"checkbox\" name=\"I like mud puddles\" id=\"set-input-3\" />\n        </label>\n        <div>\n          <Link to=\"/\">\n            <button\n              type=\"button\"\n            >\n              Back\n            </button>\n          </Link>\n\n        </div>\n      </div>\n    );\n  }\n}\n\nexport default Settings;\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { connect } from 'react-redux';\nimport md5 from 'crypto-js/md5';\nimport Questions from '../components/Questions';\nimport { fetchApi } from '../actions';\n\nclass Game extends Component {\n  constructor() {\n    super();\n    this.state = {};\n  }\n\n  componentDidMount() {\n    const { fetch } = this.props;\n    const token = JSON.parse(localStorage.getItem('token'));\n    fetch(token);\n  }\n\n  render() {\n    const { response, name, email, totalPoints } = this.props;\n    const hashEmail = md5(email).toString();\n    return (\n      <div className=\"game-page  is-primary is-fullheight\">\n        <header className=\"game-header has-background-info-light\">\n          <img\n            src={ `https://www.gravatar.com/avatar/${hashEmail}` }\n            alt=\"Gravatar\"\n            data-testid=\"header-profile-picture\"\n          />\n          <h2\n            className=\"title is-3 is-centered\"\n            data-testid=\"header-player-name\"\n          >\n            { name }\n            {' '}\n          </h2>\n          <h2\n            className=\"subtitle is-5\"\n            data-testid=\"header-score\"\n          >\n            {`Pontos:${totalPoints}`}\n          </h2>\n        </header>\n        {response ? <Questions resp={ response } /> : <h3>Loading...</h3>}\n        <label htmlFor=\"gravatar-email\" data-testid=\"input-gravatar-email\">\n          Gravar email:\n          <input\n            type=\"text\"\n            id=\"gravatar-email\"\n            // onChange={this.}\n          />\n        </label>\n      </div>\n    );\n  }\n}\n\nGame.propTypes = {\n  email: PropTypes.string.isRequired,\n  fetch: PropTypes.func.isRequired,\n  name: PropTypes.string.isRequired,\n  response: PropTypes.string.isRequired,\n  totalPoints: PropTypes.number.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  totalPoints: state.player.score,\n  name: state.login.user,\n  email: state.login.email,\n  response: state.trivia.response.results,\n});\nconst mapDispatchToProps = (dispatch) => ({\n  fetch: (token) => dispatch(fetchApi(token)),\n});\nexport default connect(mapStateToProps, mapDispatchToProps)(Game);\n","import PropTypes from 'prop-types';\nimport React, { Component } from 'react';\nimport { Link } from 'react-router-dom';\nimport { connect } from 'react-redux';\n\nclass Ranking extends Component {\n  render() {\n    const { arrayOfScore } = this.props;\n    const arrCert = arrayOfScore.sort((a, b) => b.player.score - a.player.score);\n    return (\n      <div className=\"game-page\">\n\n        <div className=\"content\">\n          <h1 className=\"is-size-2\" data-testid=\"ranking-title\">Ranking</h1>\n          <ul>\n            {arrCert.map((element, index) => (\n              <ul type=\"1\">\n                <li className=\"subtitle is-3\" data-testid={ `player-name-${index}` }>{element.player.name}</li>\n                <li className=\"subtitle is-3\" data-testid={ `player-score-${index}` }>\n                  {' '}\n                  {element.player.score}\n                  {' '}\n                </li>\n              </ul>\n            ))}\n          </ul>\n          <Link to=\"/\" data-testid=\"btn-go-home\">\n            <button className=\"button is-success\" type=\"button\">Home</button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nRanking.propTypes = {\n  arrayOfScore: PropTypes.shape({\n    sort: PropTypes.func,\n  }).isRequired,\n};\nconst mapStateToProps = (state) => ({\n  email: state.login.email,\n  user: state.login.user,\n  arrayOfUserss: state.login.arrayOfUser,\n  arrayOfScore: state.login.arrayOfScore,\n});\n\nexport default connect(mapStateToProps)(Ranking);\n","import PropTypes from 'prop-types';\nimport React from 'react';\nimport { connect } from 'react-redux';\nimport { Link } from 'react-router-dom';\nimport md5 from 'crypto-js/md5';\n\nclass Feedback extends React.Component {\n  assertionsVerify(assert) {\n    const minAssert = 3;\n    if (assert < minAssert) {\n      return <h3><strong>Podia ser melhor...!</strong></h3>;\n    }\n    return <h3><strong>Mandou bem !</strong></h3>;\n  }\n\n  render() {\n    const localstorage = JSON.parse(localStorage.getItem('state'));\n    const { player: { score, assertions } } = localstorage;\n    const { name, email } = this.props;\n    const hashEmail = md5(email).toString();\n    return (\n      <div className=\"game-page\">\n\n        <div className=\"content\">\n          <header>\n            <img\n              src={ `https://www.gravatar.com/avatar/${hashEmail}` }\n              alt=\"Gravatar\"\n              data-testid=\"header-profile-picture\"\n            />\n            <h2 data-testid=\"header-player-name\">{name}</h2>\n            <h2 data-testid=\"header-score\">{`Pontos: ${score}`}</h2>\n            <p data-testid=\"feedback-text\">{this.assertionsVerify(assertions)}</p>\n          </header>\n          <section>\n            <p className=\"subtitle is-3 my-2\" data-testid=\"feedback-total-question\">\n              {`Acertos: ${assertions}`}\n            </p>\n          </section>\n          <Link className=\"button is-link\" to=\"/\" data-testid=\"btn-play-again\">\n            Jogar novamente\n          </Link>\n          <Link to=\"/ranking\" data-testid=\"btn-ranking\">\n            <button className=\"button is-success\" type=\"button\">Ver Ranking</button>\n          </Link>\n        </div>\n      </div>\n    );\n  }\n}\n\nFeedback.propTypes = {\n  email: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n};\n\nconst mapStateToProps = (state) => ({\n  name: state.login.user,\n  email: state.login.email,\n});\n\nexport default connect(mapStateToProps, null)(Feedback);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const INITIAL_STATE = {\n  user: '',\n  email: '',\n  arrayOfUser: [],\n  arrayOfScore: [],\n};\n\nconst login = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'ACTION_LOGIN':\n    return {\n      ...state,\n      user: action.payload.user,\n      email: action.payload.email,\n    };\n  case 'ARRAY_SCORE':\n    return {\n      ...state,\n      arrayOfScore: [...state.arrayOfScore, action.score],\n    };\n  default:\n    return state;\n  }\n};\n\nexport default login;\n","const INITIAL_STATE = {\n  response: [],\n  isFetching: false,\n};\n\nconst trivia = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'BEGIN_FETCH':\n    return {\n      ...state,\n      isFetching: true,\n    };\n  case 'SUCESS_FETCH':\n    return {\n      ...state,\n      response: action.payload.response,\n      isFetching: false,\n    };\n  case 'FAIL_FETCH':\n    return {\n      ...state,\n      error: action.error,\n      isFetching: false,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default trivia;\n","const INITIAL_STATE = {\n  name: '',\n  assertions: 0,\n  score: 0,\n  gravatarEmail: '',\n};\n\nconst player = (state = INITIAL_STATE, action) => {\n  switch (action.type) {\n  case 'ACTION_PLAYER_SCORE':\n    return {\n      ...state,\n      assertions: state.assertions + action.payload.assertions,\n      score: action.payload.score,\n    };\n  default:\n    return state;\n  }\n};\n\nexport default player;\n","import { combineReducers } from 'redux';\nimport login from './login';\nimport trivia from './trivia';\nimport player from './player';\n\nconst rootReducer = combineReducers({\n  login,\n  trivia,\n  player,\n});\n\nexport default rootReducer;\n","import { createStore, applyMiddleware } from 'redux';\nimport { composeWithDevTools } from 'redux-devtools-extension';\nimport thunk from 'redux-thunk';\nimport rootReducer from '../reducers';\n\nconst middleware = [\n  thunk,\n];\n\nconst store = createStore(rootReducer,\n  composeWithDevTools(applyMiddleware(...middleware)));\n\nif (window.Cypress) {\n  window.store = store;\n}\n\nexport default store;\n","import React from 'react';\nimport 'bulma/css/bulma.min.css';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport { BrowserRouter } from 'react-router-dom';\nimport { Provider } from 'react-redux';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport store from './store';\n\nReactDOM.render(\n  <BrowserRouter basename={ process.env.PUBLIC_URL }>\n    <Provider store={ store }>\n      <App />\n    </Provider>\n  </BrowserRouter>,\n  document.getElementById('root'),\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n","import React from 'react';\nimport './App.css';\nimport { Switch, Route } from 'react-router';\nimport Login from './pages/Login';\nimport Settings from './pages/Settings';\nimport Game from './pages/Game';\nimport Ranking from './pages/Ranking';\nimport Feedback from './pages/Feedback';\n\nexport default function App() {\n  return (\n    <div>\n      <Switch>\n        <Route exact path=\"/\" component={ Login } />\n        <Route exact path=\"/settings\" component={ Settings } />\n        <Route exact path=\"/play\" component={ Game } />\n        <Route exact path=\"/ranking\" component={ Ranking } />\n        <Route exact path=\"/feedback\" component={ Feedback } />\n      </Switch>\n    </div>\n  );\n}\n"],"sourceRoot":""}